//
// Created by edy on 2022/6/30.
//

/**
 * C++变量类型
 * 变量其实只不过是程序可操作的存储区的名称，C++中每个变量都有指定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在
 * 内存中，运算符可应用于变量上。
 * 变量的名称可以由字母、数字、下划线组成。它必须以字母或下划线开头，大写字母和小写字母是不同的，因为C++是大小写敏感的。
 *
 * bool 存储值 true或 false。
 * char 通常是一个字符(八位)，这是一个整数类型。
 * int 对机器而言，整数是最自然的大小。
 * float 单精度浮点值（32位）。单精度是这样的格式：1位符号，8位指数，23位小数。
 * double 双精度浮点值（64位）。双精度格式：1位符号，11位指数，52位小数。
 * void 表示类型的缺失。
 * wchar_t 宽字符类型。
 *
 * C++也允许定义各种其他类型的变量，比如枚举、指针、数组、引用、数据结构、类等等。
 *
 * C++中的变量定义
 * 变量的定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。
 * int  run_age = 20;
 * 数据类型 变量名   值
 *
 * 变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示：
 * type variable_list;
 * 在这里，type必须是一个有效的C++数据类型，可以是char、wchar_t,int,float,double,bool或任何用户自定义的对象，
 * variable_list可以由一个或多个标识符名称组成，多个标识符直接用逗号隔开，如下所示：
 * int i,j,k;
 * char c,ch;
 * float f,salary;
 * double d;
 *
 * 变量可以在声明时被初始化(指定一个初始值)，初始化器由一个等号，后跟一个常量表达式组成，如下所示：
 * extern int d = 3, f = 5;
 * int d =3 , f = 5;
 * byte z = 22;
 * char x = 'x'
 *
 * 变量声明向编译器保证变量以给定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。
 * 变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。
 * 当您使用多个文件且只在其中一个文件中定义变量时（定义变量的文件在程序连接时是可用的），变量声明就显得非常有用。
 * 您可以使用 extern 关键字在任何地方声明一个变量。虽然您可以在 C++ 程序中多次声明一个变量，
 * 但变量只能在某个文件、函数或代码块中被定义一次。
 * 如下实例：
 */

#include "Lesson_4_变量类型.h"

//变量声明
extern int a, b;
extern int c;
extern float f;

int main1036() {
    //变量定义
    int a, b;
    int c;
    float f;

    //实际初始化
    a = 10;
    b = 20;
    c = a + b;

    cout << c << endl;

    f = 70.0 / 3.0;
    cout << f << endl;
    return 0;
}

/*
 * 同样的，在函数声明时，提供一个函数名，而函数的实际定义则可以在任何地方，如下所示：
 */

//函数声明
int func1();

int main1045(){
    //函数调用
    int i=func1();
}

//函数定义
//红蓝箭头：Go to related FUNCTION_PRE_DECLARATION(转到相关函数预声明)
//类似接口/抽象类的东西？
int func1(){
    return 22;
}

/*
 * C++中的左值(Lvalues)和右值(Rvalues)
 * C++中有俩种类型的表达式：
 * 左值(lvalues)：指向内存位置的表达式被称为左值表达式。左值可以出现在赋值号的坐标或右边。?
 * 右值(rvalues)：术语右值指的是存储在内存中某些地址的数值。右值不能对其进行赋值的表达式，也就是说，右值可以出现
 * 在赋值号的右边，但不能出现在赋值号的左边。
 *
 * 变量是左值，因此可以出现在赋值号的左边，数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边：
 * int g = 20;
 *
 */
