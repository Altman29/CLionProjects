//
// Created by edy on 2022/7/6.
//

#include "Lesson_12_数组.h"

/*
 * 数组
 * C++支持数组结构，它可以存储一个固定大小的相同类型元素的顺集合。
 * 数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。
 * 数组的声明并不是声明一个个单独的变量，比如number0、number1...number99，而是声明一个数组变量，
 * 比如numbers，然后使用numbers[0]、numbers[1]....numbers[99]来代表一个个单独的变量。
 * 数组中的特定元素可以通过索引访问。所有的数组都是由连续内存位置组成。
 * 最低的地址对应第一个元素，最高的地址对应最后一个元素。
 */

/*
 * 声明数组
 * 在C++中声明一个十足，需要指定严肃的类型和元素的数量：如下所示：
 * type arrayName[arraySize]
 * 这叫做一维数组。arraySize必须是大于0的整数常量，type可以是任意有效的C++数据类型。
 * 例如，声明一个类型为double的包含10个元素的数组balance：
 * double balance[10];
 */


/*
 * 初始化数组
 * 在C++中，可以逐个初始化数组，也可以使用一个初始化语句，如下所示：
 * double balance[5] = {100.0,2.0,3.4,6.5,50.0};
 * 此处数字大小可以省略，则默认是初始化时元素个数大小。
 * 数组的索引从0开始，数组的最后一个索引是数组的大小减1。
 * 示例如下：
 */
#include <iostream>

using namespace std;

#include <iomanip>

using std::setw;
/*
 * 下面使用到setw()函数来格式化输出。
 * 通过打印结果可以看出，setw(n) 输出n个空格
 */

int main121() {
    //声明数组
    int n[10];

    //初始化数组
    for (int i = 0; i < 10; i++) {
        n[i] = i + 100;
    }
    cout << "Element" << setw(13) << "Value" << endl;

    //输出数组中每个元素的值
    for (int i = 0; i < 10; i++) {
        cout << setw(6) << i << setw(13) << n[i] << endl;
    }

    return 0;
}

/*
 * C++中，数组是非常重要的，需要掌握一些与数组相关的概念：
 * 多维数组         C++支持多维数组，最简单的多维数组是二维数组。
 * 指向数组的指针    可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。
 * 传递数组给函数    可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。
 * 从函数返回数组    C++允许从函数返回数组。
 */