//
// Created by edy on 2022/7/5.
//

#include "Lesson_9_运算符.h"

/*
 * 运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C++ 内置了丰富的运算符，并提供了以下类型的运算符：
 * 算术运算符
 * 关系运算符
 * 逻辑运算符
 * 位运算符
 * 赋值运算符
 * 杂项运算符
 *
 * 算数运算符
 * +
 * -
 * *
 * /
 * %
 * ++
 * --
 *
 * 关系运算符
 * ==
 * !=
 * >
 * <
 * >=
 * <=
 *
 * 逻辑运算符
 * &&
 * ||
 * !非
 *
 * 位运算符
 * 位运算符作用于位，并逐位执行操作。&(与)、|(或)、^(异或)、~(取反)、<<(左移)、>>(右移)。
    & 与
    按位与操作，按二进制位进行"与"运算。运算规则：
    0&0=0;
    0&1=0;
    1&0=0;
    1&1=1;	(A & B) 将得到 12，即为 0000 1100

    | 或
    按位或运算符，按二进制位进行"或"运算。运算规则：
    0|0=0;
    0|1=1;
    1|0=1;
    1|1=1;	(A | B) 将得到 61，即为 0011 1101

    ^ 异或
    异或运算符，按二进制位进行"异或"运算。运算规则：
    0^0=0;
    0^1=1;
    1^0=1;
    1^1=0;	(A ^ B) 将得到 49，即为 0011 0001

    ~ 非
    取反运算符，按二进制位进行"取反"运算。运算规则：

    ~1=-2;
    ~0=-1;	(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。

    <<	二进制左移运算符。
    将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。	A << 2 将得到 240，即为 1111 0000

    >>	二进制右移运算符。
    将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。	A >> 2 将得到 15，即为 0000 1111


    赋值运算符
    =	简单的赋值运算符，把右边操作数的值赋给左边操作数	C = A + B 将把 A + B 的值赋给 C
    +=	加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数	C += A 相当于 C = C + A
    -=	减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数	C -= A 相当于 C = C - A
    *=	乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数	C *= A 相当于 C = C * A
    /=	除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数	C /= A 相当于 C = C / A
    %=	求模且赋值运算符，求两个操作数的模赋值给左边操作数	C %= A 相当于 C = C % A
    <<=	左移且赋值运算符	C <<= 2 等同于 C = C << 2
    >>=	右移且赋值运算符	C >>= 2 等同于 C = C >> 2
    &=	按位与且赋值运算符	C &= 2 等同于 C = C & 2
    ^=	按位异或且赋值运算符	C ^= 2 等同于 C = C ^ 2
    |=	按位或且赋值运算符	C |= 2 等同于 C = C | 2


    杂项运算符
    sizeof	：sizeof运算符返回变量的大小。例如，sizeof(a) 将返回 4，其中 a 是整数。
    Condition ? X : Y	：条件运算符。如果 Condition 为真 ? 则值为 X : 否则值为 Y。
    ,	：逗号运算符会顺序执行一系列运算。整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值。
    .（点）和 ->（箭头）	：成员运算符用于引用类、结构和共用体的成员。
    Cast	：强制转换运算符把一种数据类型转换为另一种数据类型。例如，int(2.2000) 将返回 2。
    &	：指针运算符 & 返回变量的地址。例如 &a; 将给出变量的实际地址。
    *	：指针运算符 * 指向一个变量。例如，*var; 将指向变量 var。
    *是取值，&是取地址；
 */