//
// Created by edy on 2022/7/6.
//

#include "Lesson_14_指针和引用.h"

/*
 * 指针
 * 简单又有趣，可以简化一些C++编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。
 * 所以要成为一个优秀的C++程序员学习指针是很有必要的。
 * 正如所知道的，每一个变量都有个一个内存位置，每一个内存位置都定义了可使用连字号(&)运算符访问的地址，
 * 它表示了在内存中的一个地址。
 *
 * 示例如下：
 */
#include <iostream>

using namespace std;

int main141() {
    int var1;
    char var2[10];

    cout << "var1 变量的地址: ";
    cout << &var1 << endl;
    cout << "var2 变量的地址: ";
    cout << &var2 << endl;
    return 0;

    /*
     * >>>
     * var1 变量的地址: 0x7ff7bd2d48d4
     * var2 变量的地址: 0x7ff7bd2d48de
     */
}

/*
 * 什么是指针
 * 指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。
 * 就像其他变量或常量一样，必须在使用指针存储其他变量地址之前，对其进行声明，指针变量的声明一般形式为：
 * type *var-name;
 * 在这里，type是指针的基本类型，它必须是C++有效数据类型，var-name是指针变量名称。用来声明指针的星号*与
 * 乘法中使用的星号是相同的。但是在这个语句中，星号是用来指定一个变量是指针，如下所示：
 * int *ip;     一个整型的指针
 * double *dp;  一个double型的指针
 * float * fp;  一个浮点型的指针
 * char *ch;    一个字符型的指针
 * 所有指针的值的实际数据类型，不管是整形、浮点型、字符型等都是一样的，都是一个代表内存地址的长的十六进制数。
 * 不同的数据类型的指针之间唯一不同的是，指针所指向的变量或常量的数据类型不同。
 */

/*
 * C++中使用指针
 * 使用指针时会频繁以下几个操作：
 * 定义一个指针变量、
 * 把变量地址赋值给指针、
 * 访问指针变量中可用地址的值。
 * 这些都是通过使用一元运算符*来返回位于操作数所指定地址的变量的值，如下所示：
 */

#include <iostream>

using namespace std;

int main142() {

    int var = 20;//实际变量的声明
    int *ip;//指针变量的声明

    ip = &var;//在指针变量中存储var的地址

    cout << "Value of var variable: ";
    cout << var << endl;

    //输出在指针变量中存储的地址
    cout << "Address stored in ip variable: ";
    cout << ip << endl;

    //访问指针中地址的值
    cout << "Value of *ip variable: ";
    cout << *ip << endl;

    return 0;

    /*
     * >>>
     * Value of var variable: 20
     * Address stored in ip variable: 0x7ff7b9d488e8
     * Value of *ip variable: 20
     */
}

/*
 * C++指针详解
 * 在C++中，有很多指针相关的概念，这些概念很简单，但都很重要：
 * C++ NULL指针       C++支持空指针。NULL指针是一个定义在标准库中值为零的常量。
 * C++ 指针的算术运算   可以对指针进行四种算术运算:++、--、+、-。
 * C++ 指针vs数组      指针和数组之间有着密切的关系。
 * c++ 指针数组        可以定义用来存储指针的数组。
 * C++ 指向指针的指针   C++允许指向指针的指针。
 * C++ 传递指针给函数   通过引用或地址传递参数，使传递的参数在调用函数中被改变。
 * C++ 从函数返回指针   C++允许函数返回指针到局部变量、静态变量和动态内存分配。
 */


/*
 * C++引用
 * 引用变量是一个别名，也就是说，它是某个存在的变量的另一个名字。
 * 一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。
 */

/*
 * C++引用 vs 指针
 * 引用很容易和指针混淆，它们之间主要有三个不同:
 * 1.不存在空引用。引用必须连接到一块合法的内存。
 * 2.一旦引用被初始化为一个对象，就不能被指向另一个对象。指针可以在任何时候指向另一个对象。
 * 3.引用必须在创建时被初始化。指针可以在任何时候被初始化。
 */

/*
 * C++中创建引用
 * 试想变量名称是变量附属在内存中位置的标签，可以把引用当成是变量附属在内存位置中的第二个标签。
 * 因此，可以通过原始变量名称或引用名称来访问变量的内容，例如：
 * int i = 17;
 * 可以为i声明引用变量，如下所示：
 * int& r = i;
 * double& s =d;
 * 在这些声明中，&读作引用。因此，第一个声明可以读作"r是初始化为i的整型引用"，
 * 第二个声明可以读作"s是初始化为d的double型引用"。
 * 示例如下：
 */
#include <iostream>

using namespace std;

int main143() {
    //声明简单的变量
    int i;
    double d;

    //声明引用变量
    int &r = i;
    double &s = d;

    i = 5;
    cout << "Value of i: " << i << endl;
    cout << "Value of i reference: " << r << endl;

    d = 11.7;
    cout << "Value of d :" << d << endl;
    cout << "Value of d reference: " << s << endl;

    return 0;

    /*
     * >>>
     * Value of i: 5
     * Value of i reference: 5
     * Value of d :11.7
     * Value of d reference: 11.7
     */
}

/*
 * 引用通常用于函数参数列表和函数返回值。下面列出了C++开发人员必须清楚的俩个与C++引用相关的重要概念：
 * 1.把引用作为参数        C++支持把引用作为参数传递给函数，这比传一般的参数更安全。（？）
 * 2.把引用作为返回值      可以从C++函数中返回引用，就像返回其他数据类型一样。
 */