//
// Created by edy on 2022/7/8.
//

#include "Lesson_3_重载运算符和重载函数.h"

/*
 * C++重载运算符和重载函数
 * C++允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。
 * 重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但它们的参数列表和定义(实现)不同。
 * 当调用一个重载函数或重载运算符时，编译器通过把你所使用的参数类型与定义中的参数类型比较，决定选用合适的定义。
 * 选择合适的重载函数或运算符的过程，称为重载决策。
 */


/*
 * C++中的函数重载
 * 在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的形式参数(指参数的个数、类型或顺序)必须不同。
 * 不能仅通过返回类型不同来重载函数。
 * 示例如下：
 */
#include <iostream>

using namespace std;

class printData {
public:
    void print(int i) {
        cout << "整数为" << i << endl;
    }

    void print(double f) {
        cout << "浮点数为" << f << endl;
    }

    void print(char c[]) {
        cout << "字符串为" << c << endl;
    }
};

int main112509() {
    printData pd;

    //输出整数
    pd.print(5);
    //输出浮点数
    pd.print(500.253);
    //输出字符串
    char c[] = "Hello C++";
    pd.print(c);
    return 0;
}

/*
 * C++中的运算符重载
 * 可以重定义或重载大部分C++内置的运算符。这样，就能使用自定义类型的运算符。
 * 重载的运算符是带有特殊名称的函数，函数名是由关键字operator和期后要重载的运算符符号构成的。
 * 与其他函数一样，重载运算符有一个返回类型和一个参数列表。
 * Box operator+(const Box&);
 * 声明加法运算符用于把俩个Box对象相加，返回最终的Box对象。
 * 大多数的重载运算符可以被定义为普通的非成员函数或被定义为类成员函数。
 * 如果我们定义上面的函数为类的非成员函数，那么需要为每次操作传递俩个参数，如下所示：
 * Box operator+(const Box&, const Box&);
 *
 * 下面示例使用成员函数演示了运算符重载的概念。在这里，对象作为参数进行传递，对象的属性使用this运算符进行访问：
 */
